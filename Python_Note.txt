services.msc
C:\Program Files\Git
C:\Users\richard1_hsieh\AppData\Local\Programs\Python\Python36-32
C:\python36

現以下訊息就可以檢視是否哪裡縮排有問題：
IndentationError: expected an indented block

Windows x86-64 embeddable zip file
Windows x86-64 executable installer
Windows x86-64 web-based installer

布林值（Boolean）
	True
	False
/--------

#執行 python >python

命令提示字元(prompt) - 在 Python 的命令提示字元下輸入指令（程式碼）來得到結果
數字(number)及字串(string) - 在 Python 中數字可計算，而字串表示一個文字物件
運算子(operator) - 像是 + 與 *, 可結合兩個數值進行運算產生一個新的值
函數(function) - 像是 upper() 與 len(), 讓物件展現出某種行為
比對 - 在 Python 中你可以用 >, >=, ==, <=, < 和 and, or 來比對東西
Boolean - 一種只有兩種值的物件型別： True 或 False
if...elif...else - 判斷式讓你可以在條件符合的狀況下執行相應的程式碼

str 函數可將物件轉為 字串
int 函數可將物件轉為 整數

數字（Number）
	num1 = 3
	num2 = 2
	num3 = num1 / num2

字串（String）
	str = 'data engineer'
	name = "Ola"
	
# 字串長度
		len(str)

# 換成大寫	>>>"Ola".upper()

# 串列(List)	
	>>>lottery = [3, 42, 12, 19, 30, 59]
	
# 排序	lottery.sort()	
	>>> print(lottery)
	[3, 12, 19, 30, 42, 59]
	
# 反排序	>>> lottery.reverse()
	>>> print(lottery)
	[59, 42, 30, 19, 12, 3]

# 字典(Dictionaries)
	>>> participant = {'v' : '0.0.1', 'u' : 'Poland', 'favorite_numbers' : [7, 42, 92]}

# del 指令來刪除 Dictionary 中的項目
	>>> del participant['favorite_numbers']
	>>> participant
	{'country': 'Poland', 'favorite_language': 'Python', 'name': 'Ola'}
	
# 改變已經建立的 Dictionary 中的特定值
	>>> participant['country'] = 'Germany'
	>>> participant
	{'country': 'Germany', 'favorite_language': 'Python', 'name': 'Ola'}

# 列印 print
	>>> print(participant['name'])

# If...elif...else
	>>> if 5 > 2:
	...     print('5 is indeed greater than 2')
	... else:
	...     print('5 is not greater than 2')
	...
# elif
	>>> name = 'Sonja'
	>>> if name == 'Ola':
	...     print('Hey Ola!')
	... elif name == 'Sonja':
	...     print('Hey Sonja!')
	... else:
	...     print('Hey anonymous!')
	...
	Sonja!

# def 來宣告，可以被賦予一個名稱與一些參數
	>>> def hi():
	...     print('Hi there!')
	...     print('How are you?')
	...
	>>> hi()
	Hi there!
	How are you?

# 有參數的函數	>>> def hi(name):
	>>> def hi(name):
	...     if name == 'Ola':
	...         print('Hi Ola!')
	...     elif name == 'Sonja':
	...         print('Hi Sonja!')
	...     else:
	...         print('Hi anonymous!')
	...
	>>> def hi(name):
	...     print('Hi ' + name + '!')
	...
	>>> hi("Rachel")
	Hi Rachel!
	
# 迴圈(Loop)
	>>> for name in girls:
	...     hi(name)
	...     print('Next girl')
	...
	>>> for i in range(1, 6):
	...     print(i)
	...
	1
	2
	3
	4
	5

# Django 收到網址判斷給出什麼回應。由 Django 的 urlresolver 來處理（URL - Uniform Resource Locator，為什麼這裡取名為 urlresolver ）。如果 URL 符合某一個範例，Django 就送出這個請求相對應的函數們（在這裡稱為 view ）
urlresolver 

#儲存第4跟10-12行
>>>save foo.py 4 10-12 

#執行程式
>>>run foo.py

#輸出到檔案 'w'寫入
>>>f = open("foo.txt", "w")
>>>print >> f, "Python is Cool!"
>>>f.close()

#用瀏覽器開URL
>>>webbrowser.open_new(url)

#random 大全套
>>>from random import *

#弄亂排序
shuffle(data)

#排序
data.sort()

#亂數抽一個
choice(data)

#亂數抽多個
sample(data, 3)

#亂數random
>>>先宣告	from random import randint
>>>for i in range(1,11):
    print(randint(1,100))

	
#Beautiful Soup將複雜HTML文檔轉換成一個複雜的樹形結構,每個節點都是Python對象,所有對象可以歸納為4種:
	Tag
	NavigableString
	BeautifulSoup
	Comment


（1）Tag
Tag 是什麼？通俗點講就是 HTML 中的一個個標籤，例如

上面的 title a 等等 HTML 標籤加上裡面包括的內容就是 Tag，

下面每一段代碼中注釋部分即為運行結果

print soup.title 
	#<title>The Dormouse's story</title>
print soup.head 
	#<head><title>The Dormouse's story</title></head>
print soup.a 
	#<a class="sister" href="http://example.com/elsie" id="link1"><!-- Elsie --></a>
print soup.p 
	#<p class="title" name="dromouse"><b>The Dormouse's story</b></p>

我們可以利用 soup加標籤名輕鬆地獲取這些標籤的內容，是不是感覺比正則表達式方便多了？不過有一點是，它查找的是在所有內容中的第一個符合要求的標籤，如果要查詢所有的標籤，我們在後面進行介紹。

我們可以驗證一下這些對象的類型

print type(soup.a) #<class 'bs4.element.Tag'>
對於 Tag，它有兩個重要的屬性，是 name 和 attrs，下面我們分別來感受一下

name

print soup.name print soup.head.name #[document] #head
soup 對象本身比較特殊，它的 name 即為 [document]，對於其他內部標籤，輸出的值便為標籤本身的名稱。

attrs

print soup.p.attrs #{'class': ['title'], 'name': 'dromouse'}
在這裡，我們把 p 標籤的所有屬性列印輸出了出來，得到的類型是一個字典。

如果我們想要單獨獲取某個屬性，可以這樣，例如我們獲取它的 class 叫什麼

print soup.p['class'] #['title']
還可以這樣，利用get方法，傳入屬性的名稱，二者是等價的

print soup.p.get('class') #['title']
我們可以對這些屬性和內容等等進行修改，例如

soup.p['class']="newClass" print soup.p #<p class="newClass" name="dromouse"><b>The Dormouse's story</b></p>
還可以對這個屬性進行刪除，例如

del soup.p['class'] print soup.p #<p name="dromouse"><b>The Dormouse's story</b></p>
不過，對於修改刪除的操作，不是我們的主要用途，在此不做詳細介紹了，如果有需要，請查看前面提供的官方文檔

（2）NavigableString
既然我們已經得到了標籤的內容，那麼問題來了，我們要想獲取標籤內部的文字怎麼辦呢？很簡單，用 .string 即可，例如

print soup.p.string #The Dormouse's story
這樣我們就輕鬆獲取到了標籤裡面的內容，想想如果用正則表達式要多麻煩。它的類型是一個 NavigableString，翻譯過來叫 可以遍歷的字符串，不過我們最好還是稱它英文名字吧。

print type(soup.p.string) #<class 'bs4.element.NavigableString'>
來檢查一下它的類型

（3）BeautifulSoup
BeautifulSoup對象表示的是一個文檔的全部內容.大部分時候,可以把它當作Tag對象，是一個特殊的 Tag，我們可以分別獲取它的類型，名稱，以及屬性來感受一下print type(soup.name) #<type 'unicode'> print soup.name # [document] print soup.attrs #{} 空字典
（4）Comment
Comment對象是一個特殊類型的NavigableString對象，其實輸出的內容仍然不包括注釋符號，但是如果不好好處理它，可能會對我們的文本處理造成意想不到的麻煩。
我們找一個帶注釋的標籤

print soup.a print soup.a.string print type(soup.a.string)
運行結果如下

a 標籤里的內容實際上是注釋，但是如果我們利用 .string 來輸出它的內容，我們發現它已經把注釋符號去掉了，所以這可能會給我們帶來不必要的麻煩。

另外我們列印輸出下它的類型，發現它是一個 Comment 類型，所以，我們在使用前最好做一下判斷，判斷代碼如下

if type(soup.a.string)==bs4.element.Comment: print soup.a.string
上面的代碼中，我們首先判斷了它的類型，是否為 Comment 類型，然後再進行其他操作，如列印輸出。


原文網址：https://read01.com/78PeR.html
